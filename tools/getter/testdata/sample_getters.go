// Code generated by "getter -test.v=true -test.run=^TestGenerate$"; DO NOT EDIT

package testdata

func (s *Sample) A() uint8 {
	if s.a != 0 {
		return s.a
	}
	if s.extends != nil {
		return s.A()
	}
	return 0
}

func (s *Sample) SetA(a uint8) {
	s.a = a
}

func (s *Sample) Ac() Enum {
	if s.ac != Enum(0) {
		return s.ac
	}
	if s.extends != nil {
		return s.Ac()
	}
	return Enum(0)
}

func (s *Sample) SetAc(ac Enum) {
	s.ac = ac
}

func (s *Sample) Ad() int {
	if s.ad != 0 {
		return s.ad
	}
	if s.extends != nil {
		return s.Ad()
	}
	return 0
}

func (s *Sample) SetAd(ad int) {
	s.ad = ad
}

func (s *Sample) Ae() string {
	if s.ae != "" {
		return s.ae
	}
	if s.extends != nil {
		return s.Ae()
	}
	return ""
}

func (s *Sample) SetAe(ae string) {
	s.ae = ae
}

func (s *Sample) B() uint16 {
	if s.b != 0 {
		return s.b
	}
	if s.extends != nil {
		return s.B()
	}
	return 0
}

func (s *Sample) SetB(b uint16) {
	s.b = b
}

func (s *Sample) C() uint32 {
	if s.c != 0 {
		return s.c
	}
	if s.extends != nil {
		return s.C()
	}
	return 0
}

func (s *Sample) SetC(c uint32) {
	s.c = c
}

func (s *Sample) D() uint64 {
	if s.d != 0 {
		return s.d
	}
	if s.extends != nil {
		return s.D()
	}
	return 0
}

func (s *Sample) SetD(d uint64) {
	s.d = d
}

func (s *Sample) E() int8 {
	if s.e != 0 {
		return s.e
	}
	if s.extends != nil {
		return s.E()
	}
	return 0
}

func (s *Sample) SetE(e int8) {
	s.e = e
}

func (s *Sample) F() int16 {
	if s.f != 0 {
		return s.f
	}
	if s.extends != nil {
		return s.F()
	}
	return 0
}

func (s *Sample) SetF(f int16) {
	s.f = f
}

func (s *Sample) G() int32 {
	if s.g != 0 {
		return s.g
	}
	if s.extends != nil {
		return s.G()
	}
	return 0
}

func (s *Sample) SetG(g int32) {
	s.g = g
}

func (s *Sample) H() int64 {
	if s.h != 0 {
		return s.h
	}
	if s.extends != nil {
		return s.H()
	}
	return 0
}

func (s *Sample) SetH(h int64) {
	s.h = h
}

func (s *Sample) I() float32 {
	if s.i != 0 {
		return s.i
	}
	if s.extends != nil {
		return s.I()
	}
	return 0
}

func (s *Sample) SetI(i float32) {
	s.i = i
}

func (s *Sample) J() float64 {
	if s.j != 0 {
		return s.j
	}
	if s.extends != nil {
		return s.J()
	}
	return 0
}

func (s *Sample) SetJ(j float64) {
	s.j = j
}

func (s *Sample) K() complex64 {
	if s.k != 0 {
		return s.k
	}
	if s.extends != nil {
		return s.K()
	}
	return 0
}

func (s *Sample) SetK(k complex64) {
	s.k = k
}

func (s *Sample) L() complex128 {
	if s.l != 0 {
		return s.l
	}
	if s.extends != nil {
		return s.L()
	}
	return 0
}

func (s *Sample) SetL(l complex128) {
	s.l = l
}

func (s *Sample) M() byte {
	if s.m != 0 {
		return s.m
	}
	if s.extends != nil {
		return s.M()
	}
	return 0
}

func (s *Sample) SetM(m byte) {
	s.m = m
}

func (s *Sample) N() rune {
	if s.n != 0 {
		return s.n
	}
	if s.extends != nil {
		return s.N()
	}
	return 0
}

func (s *Sample) SetN(n rune) {
	s.n = n
}

func (s *Sample) O() uint {
	if s.o != 0 {
		return s.o
	}
	if s.extends != nil {
		return s.O()
	}
	return 0
}

func (s *Sample) SetO(o uint) {
	s.o = o
}

func (s *Sample) P() int {
	if s.p != 0 {
		return s.p
	}
	if s.extends != nil {
		return s.P()
	}
	return 0
}

func (s *Sample) SetP(p int) {
	s.p = p
}

func (s *Sample) Q() uintptr {
	if s.q != 0 {
		return s.q
	}
	if s.extends != nil {
		return s.Q()
	}
	return 0
}

func (s *Sample) SetQ(q uintptr) {
	s.q = q
}

func (s *Sample) R() string {
	if s.r != "" {
		return s.r
	}
	if s.extends != nil {
		return s.R()
	}
	return ""
}

func (s *Sample) SetR(r string) {
	s.r = r
}

func (s *Sample) S() [32]byte {
	if s.s != [32]byte{} {
		return s.s
	}
	if s.extends != nil {
		return s.S()
	}
	return [32]byte{}
}

func (s *Sample) SetS(ss [32]byte) {
	s.s = ss
}

func (s *Sample) T() []int {
	if s.t != nil {
		return s.t
	}
	if s.extends != nil {
		return s.T()
	}
	return nil
}

func (s *Sample) SetT(t []int) {
	s.t = t
}

func (s *Sample) U() *Struct {
	if s.u != nil {
		return s.u
	}
	if s.extends != nil {
		return s.U()
	}
	return nil
}

func (s *Sample) SetU(u *Struct) {
	s.u = u
}

func (s *Sample) V() Struct {
	if s.v != (Struct{}) {
		return s.v
	}
	if s.extends != nil {
		return s.V()
	}
	return (Struct{})
}

func (s *Sample) SetV(v Struct) {
	s.v = v
}

func (s *Sample) W() func() {
	if s.w != nil {
		return s.w
	}
	if s.extends != nil {
		return s.W()
	}
	return nil
}

func (s *Sample) SetW(w func()) {
	s.w = w
}

func (s *Sample) X() interface{} {
	if s.x != nil {
		return s.x
	}
	if s.extends != nil {
		return s.X()
	}
	return nil
}

func (s *Sample) SetX(x interface{}) {
	s.x = x
}

func (s *Sample) Y() map[int]int {
	if s.y != nil {
		return s.y
	}
	if s.extends != nil {
		return s.Y()
	}
	return nil
}

func (s *Sample) SetY(y map[int]int) {
	s.y = y
}

func (s *Sample) Z() chan int {
	if s.z != nil {
		return s.z
	}
	if s.extends != nil {
		return s.Z()
	}
	return nil
}

func (s *Sample) SetZ(z chan int) {
	s.z = z
}
