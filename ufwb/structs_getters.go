// Code generated by "getter -type Grammar,GrammarRef,Custom,String,Structure,StructRef,Binary,Number,Offset,ScriptElement,FixedValue"; DO NOT EDIT

package ufwb

func (b *Binary) Disabled() bool {
	if b.disabled == false && b.extends != nil {
		return b.extends.Disabled()
	}
	return b.disabled
}

func (b *Binary) SetDisabled(disabled bool) {
	b.disabled = disabled
}

func (b *Binary) FillColour() Colour {
	if b.fillColour == Colour(0) && b.extends != nil {
		return b.extends.FillColour()
	}
	return b.fillColour
}

func (b *Binary) SetFillColour(fillColour Colour) {
	b.fillColour = fillColour
}

func (b *Binary) SetLength(length Reference) {
	b.length = length
}

func (b *Binary) LengthUnit() LengthUnit {
	if b.lengthUnit == LengthUnit(0) && b.extends != nil {
		return b.extends.LengthUnit()
	}
	return b.lengthUnit
}

func (b *Binary) SetLengthUnit(lengthUnit LengthUnit) {
	b.lengthUnit = lengthUnit
}

func (b *Binary) MustMatch() bool {
	if b.mustMatch == false && b.extends != nil {
		return b.extends.MustMatch()
	}
	return b.mustMatch
}

func (b *Binary) SetMustMatch(mustMatch bool) {
	b.mustMatch = mustMatch
}

func (b *Binary) RepeatMax() Reference {
	if b.repeatMax == Reference("") && b.extends != nil {
		return b.extends.RepeatMax()
	}
	return b.repeatMax
}

func (b *Binary) SetRepeatMax(repeatMax Reference) {
	b.repeatMax = repeatMax
}

func (b *Binary) RepeatMin() Reference {
	if b.repeatMin == Reference("") && b.extends != nil {
		return b.extends.RepeatMin()
	}
	return b.repeatMin
}

func (b *Binary) SetRepeatMin(repeatMin Reference) {
	b.repeatMin = repeatMin
}

func (b *Binary) StrokeColour() Colour {
	if b.strokeColour == Colour(0) && b.extends != nil {
		return b.extends.StrokeColour()
	}
	return b.strokeColour
}

func (b *Binary) SetStrokeColour(strokeColour Colour) {
	b.strokeColour = strokeColour
}

func (b *Binary) Unused() bool {
	if b.unused == false && b.extends != nil {
		return b.extends.Unused()
	}
	return b.unused
}

func (b *Binary) SetUnused(unused bool) {
	b.unused = unused
}

func (c *Custom) FillColour() Colour {
	if c.fillColour == Colour(0) && c.extends != nil {
		return c.extends.FillColour()
	}
	return c.fillColour
}

func (c *Custom) SetFillColour(fillColour Colour) {
	c.fillColour = fillColour
}

func (c *Custom) Length() Reference {
	if c.length == Reference("") && c.extends != nil {
		return c.extends.Length()
	}
	return c.length
}

func (c *Custom) SetLength(length Reference) {
	c.length = length
}

func (c *Custom) Script() string {
	if c.script == "" && c.extends != nil {
		return c.extends.Script()
	}
	return c.script
}

func (c *Custom) SetScript(script string) {
	c.script = script
}

func (c *Custom) StrokeColour() Colour {
	if c.strokeColour == Colour(0) && c.extends != nil {
		return c.extends.StrokeColour()
	}
	return c.strokeColour
}

func (c *Custom) SetStrokeColour(strokeColour Colour) {
	c.strokeColour = strokeColour
}

func (f *FixedValue) Name() string {
	if f.name == "" && f.extends != nil {
		return f.extends.Name()
	}
	return f.name
}

func (f *FixedValue) SetName(name string) {
	f.name = name
}

func (f *FixedValue) Value() interface{} {
	if f.value == nil && f.extends != nil {
		return f.extends.Value()
	}
	return f.value
}

func (f *FixedValue) SetValue(value interface{}) {
	f.value = value
}

func (g *GrammarRef) Disabled() bool {
	if g.disabled == false && g.extends != nil {
		return g.extends.Disabled()
	}
	return g.disabled
}

func (g *GrammarRef) SetDisabled(disabled bool) {
	g.disabled = disabled
}

func (g *GrammarRef) Filename() string {
	if g.filename == "" && g.extends != nil {
		return g.extends.Filename()
	}
	return g.filename
}

func (g *GrammarRef) SetFilename(filename string) {
	g.filename = filename
}

func (n *Number) Display() Display {
	if n.display == Display(0) && n.extends != nil {
		return n.extends.Display()
	}
	return n.display
}

func (n *Number) SetDisplay(display Display) {
	n.display = display
}

func (n *Number) Endian() Endian {
	if n.endian == Endian(0) && n.extends != nil {
		return n.extends.Endian()
	}
	return n.endian
}

func (n *Number) SetEndian(endian Endian) {
	n.endian = endian
}

func (n *Number) FillColour() Colour {
	if n.fillColour == Colour(0) && n.extends != nil {
		return n.extends.FillColour()
	}
	return n.fillColour
}

func (n *Number) SetFillColour(fillColour Colour) {
	n.fillColour = fillColour
}

func (n *Number) Length() Reference {
	if n.length == Reference("") && n.extends != nil {
		return n.extends.Length()
	}
	return n.length
}

func (n *Number) SetLength(length Reference) {
	n.length = length
}

func (n *Number) LengthUnit() LengthUnit {
	if n.lengthUnit == LengthUnit(0) && n.extends != nil {
		return n.extends.LengthUnit()
	}
	return n.lengthUnit
}

func (n *Number) SetLengthUnit(lengthUnit LengthUnit) {
	n.lengthUnit = lengthUnit
}

func (n *Number) Masks() []*Mask {
	if n.masks == nil && n.extends != nil {
		return n.extends.Masks()
	}
	return n.masks
}

func (n *Number) SetMasks(masks []*Mask) {
	n.masks = masks
}

func (n *Number) MaxVal() string {
	if n.maxVal == "" && n.extends != nil {
		return n.extends.MaxVal()
	}
	return n.maxVal
}

func (n *Number) SetMaxVal(maxVal string) {
	n.maxVal = maxVal
}

func (n *Number) MinVal() string {
	if n.minVal == "" && n.extends != nil {
		return n.extends.MinVal()
	}
	return n.minVal
}

func (n *Number) SetMinVal(minVal string) {
	n.minVal = minVal
}

func (n *Number) MustMatch() bool {
	if n.mustMatch == false && n.extends != nil {
		return n.extends.MustMatch()
	}
	return n.mustMatch
}

func (n *Number) SetMustMatch(mustMatch bool) {
	n.mustMatch = mustMatch
}

func (n *Number) RepeatMax() Reference {
	if n.repeatMax == Reference("") && n.extends != nil {
		return n.extends.RepeatMax()
	}
	return n.repeatMax
}

func (n *Number) SetRepeatMax(repeatMax Reference) {
	n.repeatMax = repeatMax
}

func (n *Number) RepeatMin() Reference {
	if n.repeatMin == Reference("") && n.extends != nil {
		return n.extends.RepeatMin()
	}
	return n.repeatMin
}

func (n *Number) SetRepeatMin(repeatMin Reference) {
	n.repeatMin = repeatMin
}

func (n *Number) Signed() bool {
	if n.signed == false && n.extends != nil {
		return n.extends.Signed()
	}
	return n.signed
}

func (n *Number) SetSigned(signed bool) {
	n.signed = signed
}

func (n *Number) StrokeColour() Colour {
	if n.strokeColour == Colour(0) && n.extends != nil {
		return n.extends.StrokeColour()
	}
	return n.strokeColour
}

func (n *Number) SetStrokeColour(strokeColour Colour) {
	n.strokeColour = strokeColour
}

func (n *Number) ValueExpression() string {
	if n.valueExpression == "" && n.extends != nil {
		return n.extends.ValueExpression()
	}
	return n.valueExpression
}

func (n *Number) SetValueExpression(valueExpression string) {
	n.valueExpression = valueExpression
}

func (n *Number) Values() []*FixedValue {
	if n.values == nil && n.extends != nil {
		return n.extends.Values()
	}
	return n.values
}

func (n *Number) SetValues(values []*FixedValue) {
	n.values = values
}

func (o *Offset) FillColour() Colour {
	if o.fillColour == Colour(0) && o.extends != nil {
		return o.extends.FillColour()
	}
	return o.fillColour
}

func (o *Offset) SetFillColour(fillColour Colour) {
	o.fillColour = fillColour
}

func (o *Offset) StrokeColour() Colour {
	if o.strokeColour == Colour(0) && o.extends != nil {
		return o.extends.StrokeColour()
	}
	return o.strokeColour
}

func (o *Offset) SetStrokeColour(strokeColour Colour) {
	o.strokeColour = strokeColour
}

func (s *String) Encoding() string {
	if s.encoding == "" && s.extends != nil {
		return s.extends.Encoding()
	}
	return s.encoding
}

func (s *String) SetEncoding(encoding string) {
	s.encoding = encoding
}

func (s *String) FillColour() Colour {
	if s.fillColour == Colour(0) && s.extends != nil {
		return s.extends.FillColour()
	}
	return s.fillColour
}

func (s *String) SetFillColour(fillColour Colour) {
	s.fillColour = fillColour
}

func (s *String) Length() Reference {
	if s.length == Reference("") && s.extends != nil {
		return s.extends.Length()
	}
	return s.length
}

func (s *String) SetLength(length Reference) {
	s.length = length
}

func (s *String) MustMatch() bool {
	if s.mustMatch == false && s.extends != nil {
		return s.extends.MustMatch()
	}
	return s.mustMatch
}

func (s *String) SetMustMatch(mustMatch bool) {
	s.mustMatch = mustMatch
}

func (s *String) RepeatMax() Reference {
	if s.repeatMax == Reference("") && s.extends != nil {
		return s.extends.RepeatMax()
	}
	return s.repeatMax
}

func (s *String) SetRepeatMax(repeatMax Reference) {
	s.repeatMax = repeatMax
}

func (s *String) RepeatMin() Reference {
	if s.repeatMin == Reference("") && s.extends != nil {
		return s.extends.RepeatMin()
	}
	return s.repeatMin
}

func (s *String) SetRepeatMin(repeatMin Reference) {
	s.repeatMin = repeatMin
}

func (s *String) StrokeColour() Colour {
	if s.strokeColour == Colour(0) && s.extends != nil {
		return s.extends.StrokeColour()
	}
	return s.strokeColour
}

func (s *String) SetStrokeColour(strokeColour Colour) {
	s.strokeColour = strokeColour
}

func (s *String) Typ() string {
	if s.typ == "" && s.extends != nil {
		return s.extends.Typ()
	}
	return s.typ
}

func (s *String) SetTyp(typ string) {
	s.typ = typ
}

func (s *String) Values() []*FixedValue {
	if s.values == nil && s.extends != nil {
		return s.extends.Values()
	}
	return s.values
}

func (s *String) SetValues(values []*FixedValue) {
	s.values = values
}

func (s *StructRef) FillColour() Colour {
	if s.fillColour == Colour(0) && s.extends != nil {
		return s.extends.FillColour()
	}
	return s.fillColour
}

func (s *StructRef) SetFillColour(fillColour Colour) {
	s.fillColour = fillColour
}

func (s *StructRef) RepeatMax() Reference {
	if s.repeatMax == Reference("") && s.extends != nil {
		return s.extends.RepeatMax()
	}
	return s.repeatMax
}

func (s *StructRef) SetRepeatMax(repeatMax Reference) {
	s.repeatMax = repeatMax
}

func (s *StructRef) RepeatMin() Reference {
	if s.repeatMin == Reference("") && s.extends != nil {
		return s.extends.RepeatMin()
	}
	return s.repeatMin
}

func (s *StructRef) SetRepeatMin(repeatMin Reference) {
	s.repeatMin = repeatMin
}

func (s *StructRef) StrokeColour() Colour {
	if s.strokeColour == Colour(0) && s.extends != nil {
		return s.extends.StrokeColour()
	}
	return s.strokeColour
}

func (s *StructRef) SetStrokeColour(strokeColour Colour) {
	s.strokeColour = strokeColour
}

func (s *StructRef) Structure() *Structure {
	if s.structure == nil && s.extends != nil {
		return s.extends.Structure()
	}
	return s.structure
}

func (s *StructRef) SetStructure(structure *Structure) {
	s.structure = structure
}

func (s *Structure) Display() Display {
	if s.display == Display(0) && s.extends != nil {
		return s.extends.Display()
	}
	return s.display
}

func (s *Structure) SetDisplay(display Display) {
	s.display = display
}

func (s *Structure) Elements() []Element {
	if s.elements == nil && s.extends != nil {
		return s.extends.Elements()
	}
	return s.elements
}

func (s *Structure) SetElements(elements []Element) {
	s.elements = elements
}

func (s *Structure) Encoding() string {
	if s.encoding == "" && s.extends != nil {
		return s.extends.Encoding()
	}
	return s.encoding
}

func (s *Structure) SetEncoding(encoding string) {
	s.encoding = encoding
}

func (s *Structure) Endian() Endian {
	if s.endian == Endian(0) && s.extends != nil {
		return s.extends.Endian()
	}
	return s.endian
}

func (s *Structure) SetEndian(endian Endian) {
	s.endian = endian
}

func (s *Structure) FillColour() Colour {
	if s.fillColour == Colour(0) && s.extends != nil {
		return s.extends.FillColour()
	}
	return s.fillColour
}

func (s *Structure) SetFillColour(fillColour Colour) {
	s.fillColour = fillColour
}

func (s *Structure) SetLength(length Reference) {
	s.length = length
}

func (s *Structure) LengthOffset() Reference {
	if s.lengthOffset == Reference("") && s.extends != nil {
		return s.extends.LengthOffset()
	}
	return s.lengthOffset
}

func (s *Structure) SetLengthOffset(lengthOffset Reference) {
	s.lengthOffset = lengthOffset
}

func (s *Structure) LengthUnit() LengthUnit {
	if s.lengthUnit == LengthUnit(0) && s.extends != nil {
		return s.extends.LengthUnit()
	}
	return s.lengthUnit
}

func (s *Structure) SetLengthUnit(lengthUnit LengthUnit) {
	s.lengthUnit = lengthUnit
}

func (s *Structure) Order() Order {
	if s.order == Order(0) && s.extends != nil {
		return s.extends.Order()
	}
	return s.order
}

func (s *Structure) SetOrder(order Order) {
	s.order = order
}

func (s *Structure) Signed() bool {
	if s.signed == false && s.extends != nil {
		return s.extends.Signed()
	}
	return s.signed
}

func (s *Structure) SetSigned(signed bool) {
	s.signed = signed
}

func (s *Structure) StrokeColour() Colour {
	if s.strokeColour == Colour(0) && s.extends != nil {
		return s.extends.StrokeColour()
	}
	return s.strokeColour
}

func (s *Structure) SetStrokeColour(strokeColour Colour) {
	s.strokeColour = strokeColour
}
