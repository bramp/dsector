<?xml version="1.0" encoding="UTF-8"?>
<ufwb version="1.7">
    <grammar name="JPEG" start="id:1303" author="Andreas Pehnack" fileextension="jpg,jpeg" uti="public.jpeg">
        <description>Grammar for JPG files</description>
        <structure name="JPG file" id="1303" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structure name="Markers" id="1304" repeatmax="-1" order="variable">
                <structref name="SOI" id="1306" repeatmin="0" structure="id:1305"/>
                <structref name="SOF0" id="1308" repeatmin="0" structure="id:1307"/>
                <structref name="ImageData" id="1310" repeatmin="0" structure="id:1309"/>
                <structref name="RestartImageData" id="1312" repeatmin="0" structure="id:1311"/>
                <structref name="COMMENT" id="1314" repeatmin="0" structure="id:1313"/>
                <structref name="DHT" id="1316" repeatmin="0" structure="id:1315"/>
                <structref name="DRI" id="1318" repeatmin="0" structure="id:1317"/>
                <structref name="DQT" id="1320" repeatmin="0" structure="id:1319"/>
                <structref name="EOI" id="1322" repeatmin="0" structure="id:1321"/>
                <structref name="APP0" id="1324" repeatmin="0" structure="id:1323"/>
                <structref name="App1_XMP" id="1326" repeatmin="0" structure="id:1325"/>
                <structref name="App1_EXIF" id="1328" repeatmin="0" structure="id:1327"/>
                <structref name="App2_ICC" id="1330" repeatmin="0" structure="id:1329"/>
                <structref name="App12" id="1332" repeatmin="0" structure="id:1331"/>
                <structref name="App13_Adobe" id="1334" repeatmin="0" structure="id:1333"/>
                <structref name="App13_Photoshop" id="1336" repeatmin="0" structure="id:1335"/>
                <structref name="App14" id="1338" repeatmin="0" structure="id:1337"/>
                <structref name="App15" id="1340" repeatmin="0" structure="id:1339"/>
                <structref name="Marker" id="1342" repeatmin="0" structure="id:1341"/>
            </structure>
        </structure>
        <structure name="Marker" id="1341" length="2" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Fixed" mustmatch="yes" id="1345" fillcolor="73FDFF" type="integer" length="1" display="hex">
                <fixedvalues>
                    <fixedvalue name="FF" value="0xFF"/>
                </fixedvalues>
            </number>
            <number name="ID" mustmatch="yes" id="1346" fillcolor="75D5FF" type="integer" length="1" display="hex"/>
        </structure>
        <structure name="SegmentMarker" id="1348" length="length+2" extends="id:1341" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Fixed" id="1349" type="integer"/>
            <number name="ID" id="1350" type="integer"/>
            <number name="length" id="1351" type="integer" length="2">
                <description>Total field byte count, including the byte count value (2 bytes), but excluding the marker itself</description>
            </number>
        </structure>
        <structure name="SOI" id="1305" extends="id:1341">
            <description>start-of-image marker</description>
            <number name="Fixed" id="1353" type="integer"/>
            <number name="ID" id="1354" type="integer">
                <fixedvalues>
                    <fixedvalue name="D8" value="0xD8"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="SOFx" id="1307" extends="id:1348">
            <description>baseline DCT process frame marker</description>
            <number name="ID" id="1357" type="integer">
                <description>SOF0: Baseline DCT&#13;SOF1: Extended sequential DCT, Huffman coding&#13;SOF2: Progressive DCT, Huffman coding
SOF3: Lossless (sequential), Huffman coding&#13;SOF9: Extended sequential DCT, arithmetic coding&#13;SOF10: Progressive DCT, arithmetic coding&#13;SOF11: Lossless (sequential), arithmetic coding</description>
                <fixedvalues>
                    <fixedvalue name="SOF0" value="0xC0"/>
                    <fixedvalue name="SOF1" value="0xC1"/>
                    <fixedvalue name="SOF2" value="0xC2"/>
                    <fixedvalue name="SOF3" value="0xC3"/>
                    <fixedvalue name="SOF5" value="0xC5"/>
                    <fixedvalue name="SOF6" value="0xC6"/>
                    <fixedvalue name="SOF7" value="0xC7"/>
                    <fixedvalue name="SOF9" value="0xC9"/>
                    <fixedvalue name="SOF10" value="0xCA"/>
                    <fixedvalue name="SOF11" value="0xCB"/>
                    <fixedvalue name="SOF13" value="0xCD"/>
                    <fixedvalue name="SOF14" value="0xCE"/>
                    <fixedvalue name="SOF15" value="0xCF"/>
                </fixedvalues>
            </number>
            <number name="precision" id="1359" type="integer" length="1">
                <description>Sample precision – Specifies the precision in bits for the samples of the components in the frame.</description>
            </number>
            <number name="lines" id="1360" type="integer" length="2">
                <description>Number of lines – Specifies the maximum number of lines in the source image. This shall be equal to the number of lines in the component with the maximum number of vertical samples (see A.1.1). Value 0 indicates that the number of lines shall be defined by the DNL marker and parameters at the end of the first scan</description>
            </number>
            <number name="samples_per_line" id="1361" type="integer" length="2">
                <description>Number of samples per line – Specifies the maximum number of samples per line in the source image. This shall be equal to the number of samples per line in the component with the maximum number of horizontal samples</description>
            </number>
            <number name="components" id="1362" type="integer" length="1">
                <description>Number of image components in frame – Specifies the number of source image components in the frame. The value of Nf shall be equal to the number of sets of frame component specification parameters (Ci, Hi, Vi, and Tqi) present in the frame header</description>
            </number>
            <structure name="Components" id="1363" repeat="id:1362" repeatmax="4">
                <number name="ID" id="1364" type="integer" length="1">
                    <description>Component identifier – Assigns a unique label to the ith component in the sequence of frame component specification parameters. These values shall be used in the scan headers to identify the components in the scan. The value of Ci shall be different from the values of C1 through Ci − 1</description>
                </number>
                <number name="horzSamplingFactor" id="1365" type="integer" length="4" lengthunit="bit">
                    <description>Horizontal sampling factor – Specifies the relationship between the component horizontal dimension and maximum image dimension X (see A.1.1); also specifies the number of horizontal data units of component Ci in each MCU, when more than one component is encoded in a scan</description>
                </number>
                <number name="vertSamplingFactor" id="1366" type="integer" length="4" lengthunit="bit">
                    <description>Vertical sampling factor – Specifies the relationship between the component vertical dimension and maximum image dimension Y (see A.1.1); also specifies the number of vertical data units of component Ci in each MCU, when more than one component is encoded in a scan</description>
                </number>
                <number name="destSel" id="1367" type="integer" length="1">
                    <description>Quantization table destination selector – Specifies one of four possible quantization table destinations from which the quantization table to use for dequantization of DCT coefficients of component Ci is retrieved. If the decoding process uses the dequantization procedure, this table shall have been installed in this destination by the time the decoder is ready to decode the scan(s) containing component Ci. The destination shall not be re- specified, or its contents changed, until all scans containing Ci have been completed</description>
                </number>
            </structure>
        </structure>
        <structure name="SOS" id="1370" extends="id:1348">
            <description>start-of-scan marker</description>
            <number name="ID" id="1372" type="integer">
                <fixedvalues>
                    <fixedvalue name="SOS" value="0xDA"/>
                </fixedvalues>
            </number>
            <number name="length" id="1373" type="integer">
                <description>Scan header length – Specifies the length of the scan header</description>
            </number>
            <number name="components" id="1374" type="integer" length="1">
                <description>Number of image components in scan – Specifies the number of source image components in the scan. The value of Ns shall be equal to the number of sets of scan component specification parameters (Csj, Tdj, and Taj) present in the scan header</description>
            </number>
            <structure name="CompSel" id="1375" repeat="id:1374" repeatmax="-1">
                <description>Scan component selector – Selects which of the Nf image components specified in the frame parameters shall be the jth component in the scan. Each Csj shall match one of the Ci values specified in the frame header, and the ordering in the scan header shall follow the ordering in the frame header.</description>
                <number name="DC" id="1376" type="integer" length="4" lengthunit="bit">
                    <description>DC entropy coding table destination selector – Specifies one of four possible DC entropy coding table destinations from which the entropy table needed for decoding of the DC coefficients of component Csj is retrieved. The DC entropy table shall have been installed in this destination (see B.2.4.2 and B.2.4.3) by the time the decoder is ready to decode the current scan. This parameter specifies the entropy coding table destination for the lossless processes</description>
                </number>
                <number name="AC" id="1377" type="integer" length="4" lengthunit="bit">
                    <description>AC entropy coding table destination selector – Specifies one of four possible AC entropy coding table destinations from which the entropy table needed for decoding of the AC coefficients of component Csj is retrieved. The AC entropy table selected shall have been installed in this destination (see B.2.4.2 and B.2.4.3) by the time the decoder is ready to decode the current scan. This parameter is zero for the lossless processes</description>
                </number>
            </structure>
            <number name="Ss" id="1379" type="integer" length="1">
                <description>Start of spectral or predictor selection – In the DCT modes of operation, this parameter specifies the first DCT coefficient in each block in zig-zag order which shall be coded in the scan. This parameter shall be set to zero for the sequential DCT processes. In the lossless mode of operations this parameter is used to select the predictor.</description>
            </number>
            <number name="Se" id="1380" type="integer" length="1">
                <description>End of spectral selection – Specifies the last DCT coefficient in each block in zig-zag order which shall be coded in the scan. This parameter shall be set to 63 for the sequential DCT processes. In the lossless mode of operations this parameter has no meaning. It shall be set to zero</description>
            </number>
            <number name="Ah" id="1381" type="integer" length="4" lengthunit="bit">
                <description>Successive approximation bit position high – This parameter specifies the point transform used in the preceding scan (i.e. successive approximation bit position low in the preceding scan) for the band of coefficients specified by Ss and Se. This parameter shall be set to zero for the first scan of each band of coefficients. In the lossless mode of operations this parameter has no meaning. It shall be set to zero.</description>
            </number>
            <number name="AI" id="1382" type="integer" length="4" lengthunit="bit">
                <description>Successive approximation bit position low or point transform – In the DCT modes of operation this parameter specifies the point transform, i.e. bit position low, used before coding the band of coefficients specified by Ss and Se. This parameter shall be set to zero for the sequential DCT processes. In the lossless mode of operations, this parameter specifies the point transform, Pt</description>
            </number>
        </structure>
        <structure name="COMMENT" id="1313" extends="id:1348">
            <number name="ID" id="1385" type="integer">
                <fixedvalues>
                    <fixedvalue name="COMMENT" value="0xFE"/>
                </fixedvalues>
            </number>
            <string name="Comment" id="1387" type="fixed-length" length="-1"/>
        </structure>
        <structure name="DHT" id="1315" extends="id:1348">
            <description>Define Huffman table(s)</description>
            <number name="ID" id="1390" type="integer">
                <fixedvalues>
                    <fixedvalue name="DHT" value="0xC4"/>
                </fixedvalues>
            </number>
            <number name="tableClass" id="1392" type="integer" length="4" lengthunit="bit">
                <description>Table class – 0 = DC table or lossless table, 1 = AC table</description>
                <fixedvalues>
                    <fixedvalue name="DC or lossless" value="0"/>
                    <fixedvalue name="AC" value="1"/>
                </fixedvalues>
            </number>
            <number name="tableDest" id="1393" type="integer" length="4" lengthunit="bit">
                <description>Huffman table destination identifier – Specifies one of four possible destinations at the decoder into which the Huffman table shall be installed</description>
            </number>
            <number name="codes" id="1394" repeatmax="16" type="integer" length="1">
                <description>Number of Huffman codes of length i – Specifies the number of Huffman codes for each of the 16 possible lengths allowed by this Specification. Li’s are the elements of the list BITS</description>
            </number>
            <number name="values" id="1395" repeatmax="-1" type="integer" length="1">
                <description>Value associated with each Huffman code – Specifies, for each i, the value associated with each Huffman code of length i. The meaning of each value is determined by the Huffman coding model. The Vi,j’s are the elements of the list HUFFVAL</description>
            </number>
        </structure>
        <structure name="DRI" id="1317" extends="id:1348">
            <number name="ID" id="1398" type="integer">
                <fixedvalues>
                    <fixedvalue name="DRI" value="0xDD"/>
                </fixedvalues>
            </number>
            <number name="restartInterval" id="1400" type="integer" length="2">
                <description>Restart interval – Specifies the number of MCU in the restart interval</description>
            </number>
        </structure>
        <structure name="DQT" id="1319" extends="id:1348">
            <description>define-quantization-tables marker</description>
            <number name="ID" id="1403" type="integer">
                <fixedvalues>
                    <fixedvalue name="DB" value="0xDB"/>
                </fixedvalues>
            </number>
            <structure name="QuantTable" id="1404" order="variable">
                <structref name="QuantTable8" id="1407" repeatmin="0" structure="id:1406"/>
                <structref name="QuantTable16" id="1409" repeatmin="0" structure="id:1408"/>
            </structure>
        </structure>
        <structure name="EOI" id="1321" extends="id:1341">
            <number name="Fixed" id="1412" type="integer"/>
            <number name="ID" id="1413" type="integer">
                <fixedvalues>
                    <fixedvalue name="EOI" value="0xD9"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="RST" id="1415" extends="id:1341">
            <number name="Fixed" id="1416" type="integer"/>
            <number name="ID" id="1417" type="integer">
                <fixedvalues>
                    <fixedvalue name="RST0" value="0xD0"/>
                    <fixedvalue name="RST1" value="0xD1"/>
                    <fixedvalue name="RST2" value="0xD2"/>
                    <fixedvalue name="RST3" value="0xD3"/>
                    <fixedvalue name="RST4" value="0xD4"/>
                    <fixedvalue name="RST5" value="0xD5"/>
                    <fixedvalue name="RST6" value="0xD6"/>
                    <fixedvalue name="RST7" value="0xD7"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="APP0" id="1323" extends="id:1348">
            <number name="ID" id="1420" type="integer">
                <fixedvalues>
                    <fixedvalue name="E0" value="0xE0"/>
                </fixedvalues>
            </number>
            <string name="identifier" mustmatch="yes" id="1422" type="fixed-length" length="5">
                <description>= X'4A', X'46', X'49', X'46', X'00'&#13;This zero terminated string (“JFIF”) uniquely identifies this APP0 marker. This string shall have zero parity (bit 7=0).</description>
                <fixedvalues>
                    <fixedvalue name="JFIF" value="JFIF"/>
                </fixedvalues>
            </string>
            <number name="major version" id="1423" type="integer" length="1"/>
            <number name="minor version" id="1424" type="integer" length="1"/>
            <number name="units" id="1425" type="integer" length="1">
                <description>Units for the X and Y densities</description>
                <fixedvalues>
                    <fixedvalue name="no units" value="0"/>
                    <fixedvalue name="dots per inch" value="1"/>
                    <fixedvalue name="dots per cm" value="2"/>
                </fixedvalues>
            </number>
            <number name="Xdensity" id="1426" type="integer" length="2">
                <description>Horizontal pixel density</description>
            </number>
            <number name="Ydensity" id="1427" type="integer" length="2">
                <description>Vertical pixel density</description>
            </number>
            <number name="Xthumbnail" id="1428" type="integer" length="1">
                <description>Thumbnail horizontal pixel count</description>
            </number>
            <number name="Ythumbnail" id="1429" type="integer" length="1">
                <description>Thumbnail vertical pixel count</description>
            </number>
            <structure name="Thumbnail" id="1430" length="Xthumbnail*Ythumbnail" repeatmin="0" repeatmax="-1">
                <number name="red" id="1431" type="integer" length="1"/>
                <number name="green" id="1432" type="integer" length="1"/>
                <number name="blue" id="1433" type="integer" length="1"/>
            </structure>
        </structure>
        <structure name="App1_EXIF" id="1327" extends="id:1348">
            <number name="ID" id="1437" type="integer">
                <fixedvalues>
                    <fixedvalue name="E1" value="0xE1"/>
                </fixedvalues>
            </number>
            <grammarref name="Exif" id="1439" disabled="yes" filename="exif.grammar"/>
        </structure>
        <structure name="App1_XMP" id="1325" extends="id:1348" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="ID" id="1442" type="integer">
                <fixedvalues>
                    <fixedvalue name="E1" value="0xE1"/>
                </fixedvalues>
            </number>
            <string name="XMP" mustmatch="yes" id="1444" type="fixed-length" length="29">
                <fixedvalues>
                    <fixedvalue name="ID" value="http://ns.adobe.com/xap/1.0/"/>
                </fixedvalues>
            </string>
        </structure>
        <structure name="App2" id="1446" extends="id:1348"/>
        <structure name="App2_ICC" id="1329" extends="id:1348">
            <number name="ID" id="1452" type="integer">
                <fixedvalues>
                    <fixedvalue name="E2" value="0xE2"/>
                </fixedvalues>
            </number>
            <string name="ICC" mustmatch="yes" id="1454" type="fixed-length" length="12">
                <fixedvalues>
                    <fixedvalue name="ID" value="ICC_PROFILE"/>
                </fixedvalues>
            </string>
            <number name="blockNum" id="1455" type="integer" length="1"/>
            <number name="blockTotal" id="1456" type="integer" length="1"/>
            <grammarref name="ICC File" id="1457" disabled="yes" filename="icc.grammar" uti="com.apple.colorsync-profile"/>
        </structure>
        <structure name="App12" id="1331" extends="id:1348">
            <description>Photoshop uses the JPEG APP12 &quot;Ducky&quot; segment to store some information in &quot;Save for Web&quot; images</description>
            <number name="ID" id="1460" type="integer">
                <fixedvalues>
                    <fixedvalue name="APP12" value="0xEC"/>
                </fixedvalues>
            </number>
            <string name="Ducky" id="1462" type="fixed-length" length="5">
                <fixedvalues>
                    <fixedvalue name="ID" value="Ducky"/>
                </fixedvalues>
            </string>
            <structure name="Tags" id="1463" repeatmax="-1" order="variable">
                <structure name="Quality" id="1464" repeatmin="0">
                    <number name="Tag" mustmatch="yes" id="1465" type="integer" length="2">
                        <fixedvalues>
                            <fixedvalue name="Quality" value="1"/>
                        </fixedvalues>
                    </number>
                    <number name="Length" id="1466" type="integer" length="2"/>
                    <number name="Value" id="1467" type="integer" length="Length"/>
                </structure>
                <structure name="Comment" id="1469" repeatmin="0">
                    <number name="Tag" mustmatch="yes" id="1470" type="integer" length="2">
                        <fixedvalues>
                            <fixedvalue name="Comment" value="2"/>
                        </fixedvalues>
                    </number>
                    <number name="Length" id="1471" type="integer" length="2"/>
                    <string name="Comment" id="1472" type="fixed-length" length="Length"/>
                </structure>
                <structure name="Copyright" id="1474" length="0" alignment="0" repeatmin="0">
                    <number name="Tag" mustmatch="yes" id="1475" type="integer" length="2">
                        <fixedvalues>
                            <fixedvalue name="Copyright" value="3"/>
                        </fixedvalues>
                    </number>
                    <number name="Length" id="1476" type="integer" length="2"/>
                    <string name="Comment" id="1477" type="fixed-length" length="-1"/>
                </structure>
                <structure name="End" id="1479" repeatmin="0">
                    <number name="Tag" mustmatch="yes" id="1480" type="integer" length="2">
                        <fixedvalues>
                            <fixedvalue name="End" value="0"/>
                        </fixedvalues>
                    </number>
                </structure>
            </structure>
        </structure>
        <structure name="App13_Adobe" id="1333" extends="id:1348">
            <number name="ID" id="1485" type="integer">
                <fixedvalues>
                    <fixedvalue name="APP13" value="0xED"/>
                </fixedvalues>
            </number>
            <string name="Adobe" mustmatch="yes" id="1487" type="fixed-length" length="9">
                <fixedvalues>
                    <fixedvalue name="Adobe" value="Adobe_CM"/>
                </fixedvalues>
            </string>
        </structure>
        <structure name="App13_Photoshop" id="1335" extends="id:1348">
            <number name="ID" id="1490" type="integer">
                <fixedvalues>
                    <fixedvalue name="APP13" value="0xED"/>
                </fixedvalues>
            </number>
            <string name="Photoshop" mustmatch="yes" id="1492" type="fixed-length" length="14">
                <fixedvalues>
                    <fixedvalue name="Photoshop" value="Photoshop 3.0"/>
                </fixedvalues>
            </string>
            <structure name="Blocks" id="1493" disabled="yes" repeatmax="-1" order="variable">
                <structref name="App13Block1000" id="1495" repeatmin="0" structure="id:1494"/>
                <structref name="App13Block1001" id="1497" repeatmin="0" structure="id:1496"/>
                <structref name="App13Block1003" id="1499" repeatmin="0" structure="id:1498"/>
                <structref name="App13Block1005" id="1501" repeatmin="0" structure="id:1500"/>
                <structref name="App13Block1006" id="1503" repeatmin="0" structure="id:1502"/>
                <structref name="App13Block1007" id="1505" repeatmin="0" structure="id:1504"/>
                <structref name="App13Block1008" id="1507" repeatmin="0" structure="id:1506"/>
                <structref name="App13Block1009" id="1509" repeatmin="0" structure="id:1508"/>
                <structref name="App13Block1010" id="1511" repeatmin="0" structure="id:1510"/>
                <structref name="App13Block1011" id="1513" repeatmin="0" structure="id:1512"/>
                <structref name="App13Block1012" id="1515" repeatmin="0" structure="id:1514"/>
                <structref name="App13Block1013" id="1517" repeatmin="0" structure="id:1516"/>
                <structref name="App13Block1014" id="1519" repeatmin="0" structure="id:1518"/>
                <structref name="App13Block1015" id="1521" repeatmin="0" structure="id:1520"/>
                <structref name="App13Block1016" id="1523" repeatmin="0" structure="id:1522"/>
                <structref name="App13Block1017" id="1525" repeatmin="0" structure="id:1524"/>
                <structref name="App13Block1018" id="1527" repeatmin="0" structure="id:1526"/>
                <structref name="App13Block1019" id="1529" repeatmin="0" structure="id:1528"/>
                <structref name="App13Block1020" id="1531" repeatmin="0" structure="id:1530"/>
                <structref name="App13Block1021" id="1533" repeatmin="0" structure="id:1532"/>
                <structref name="App13Block1022" id="1535" repeatmin="0" structure="id:1534"/>
                <structref name="App13Block1023" id="1537" repeatmin="0" structure="id:1536"/>
                <structref name="App13Block1024" id="1539" repeatmin="0" structure="id:1538"/>
                <structref name="App13Block1025" id="1541" repeatmin="0" structure="id:1540"/>
                <structref name="App13Block1026" id="1543" repeatmin="0" structure="id:1542"/>
                <structref name="App13Block1027" id="1545" repeatmin="0" structure="id:1544"/>
                <structref name="App13Block1028" id="1547" repeatmin="0" structure="id:1546"/>
                <structref name="App13Block1029" id="1549" repeatmin="0" structure="id:1548"/>
                <structref name="App13Block1030" id="1551" repeatmin="0" structure="id:1550"/>
                <structref name="App13Block1032" id="1553" repeatmin="0" structure="id:1552"/>
                <structref name="App13Block1033" id="1555" repeatmin="0" structure="id:1554"/>
                <structref name="App13Block1034" id="1557" repeatmin="0" structure="id:1556"/>
                <structref name="App13Block1035" id="1559" repeatmin="0" structure="id:1558"/>
                <structref name="App13Block1036" id="1561" repeatmin="0" structure="id:1560"/>
                <structref name="App13Block1037" id="1563" repeatmin="0" structure="id:1562"/>
                <structref name="App13Block1038" id="1565" repeatmin="0" structure="id:1564"/>
                <structref name="App13Block1039" id="1567" repeatmin="0" structure="id:1566"/>
                <structref name="App13Block1040" id="1569" repeatmin="0" structure="id:1568"/>
                <structref name="App13Block1041" id="1571" repeatmin="0" structure="id:1570"/>
                <structref name="App13Block1042" id="1573" repeatmin="0" structure="id:1572"/>
                <structref name="App13Block1043" id="1575" repeatmin="0" structure="id:1574"/>
                <structref name="App13Block1044" id="1577" repeatmin="0" structure="id:1576"/>
                <structref name="App13Block1045" id="1579" repeatmin="0" structure="id:1578"/>
                <structref name="App13Block1046" id="1581" repeatmin="0" structure="id:1580"/>
                <structref name="App13Block1047" id="1583" repeatmin="0" structure="id:1582"/>
                <structref name="App13Block1049" id="1585" repeatmin="0" structure="id:1584"/>
                <structref name="App13Block1050" id="1587" repeatmin="0" structure="id:1586"/>
                <structref name="App13Block1051" id="1589" repeatmin="0" structure="id:1588"/>
                <structref name="App13Block1052" id="1591" repeatmin="0" structure="id:1590"/>
                <structref name="App13Block1053" id="1593" repeatmin="0" structure="id:1592"/>
                <structref name="App13Block1054" id="1595" repeatmin="0" structure="id:1594"/>
                <structref name="App13Block1057" id="1597" repeatmin="0" structure="id:1596"/>
                <structref name="App13Block1058" id="1599" repeatmin="0" structure="id:1598"/>
                <structref name="App13Block1059" id="1601" repeatmin="0" structure="id:1600"/>
                <structref name="App13Block1060" id="1603" repeatmin="0" structure="id:1602"/>
                <structref name="App13Block1061" id="1605" repeatmin="0" structure="id:1604"/>
                <structref name="App13Block1062" id="1607" repeatmin="0" structure="id:1606"/>
                <structref name="App13Block1064" id="1609" repeatmin="0" structure="id:1608"/>
                <structref name="App13Block1065" id="1611" repeatmin="0" structure="id:1610"/>
                <structref name="App13Block1066" id="1613" repeatmin="0" structure="id:1612"/>
                <structref name="App13Block1067" id="1615" repeatmin="0" structure="id:1614"/>
                <structref name="App13Block1069" id="1617" repeatmin="0" structure="id:1616"/>
                <structref name="App13Block1070" id="1619" repeatmin="0" structure="id:1618"/>
                <structref name="App13Block1071" id="1621" repeatmin="0" structure="id:1620"/>
                <structref name="App13Block1072" id="1623" repeatmin="0" structure="id:1622"/>
                <structref name="App13Block1073" id="1625" repeatmin="0" structure="id:1624"/>
                <structref name="App13Block1074" id="1627" repeatmin="0" structure="id:1626"/>
                <structref name="App13Block1075" id="1629" repeatmin="0" structure="id:1628"/>
                <structref name="App13Block1076" id="1631" repeatmin="0" structure="id:1630"/>
                <structref name="App13Block1077" id="1633" repeatmin="0" structure="id:1632"/>
                <structref name="App13Block1078" id="1635" repeatmin="0" structure="id:1634"/>
                <structref name="App13Block1080" id="1637" repeatmin="0" structure="id:1636"/>
                <structref name="App13Block1082" id="1639" repeatmin="0" structure="id:1638"/>
                <structref name="App13Block1083" id="1641" repeatmin="0" structure="id:1640"/>
                <structref name="App13Block1084" id="1643" repeatmin="0" structure="id:1642"/>
                <structref name="App13Block1085" id="1645" repeatmin="0" structure="id:1644"/>
                <structref name="App13Block1086" id="1647" repeatmin="0" structure="id:1646"/>
                <structref name="App13Block1087" id="1649" repeatmin="0" structure="id:1648"/>
                <structref name="App13Block1088" id="1651" repeatmin="0" structure="id:1650"/>
                <structref name="App13Block2xxx-2997" id="1653" repeatmin="0" structure="id:1652"/>
                <structref name="App13Block2999" id="1655" repeatmin="0" structure="id:1654"/>
                <structref name="App13Block3000" id="1657" repeatmin="0" structure="id:1656"/>
                <structref name="App13Block4xxx" id="1659" repeatmin="0" structure="id:1658"/>
                <structref name="App13Block7000" id="1661" repeatmin="0" structure="id:1660"/>
                <structref name="App13Block7001" id="1663" repeatmin="0" structure="id:1662"/>
                <structref name="App13Block8000" id="1665" repeatmin="0" structure="id:1664"/>
                <structref name="App13Block10000" id="1667" repeatmin="0" structure="id:1666"/>
                <structref name="App13Block" id="1669" repeatmin="0" structure="id:1668"/>
            </structure>
        </structure>
        <structure name="App14" id="1337" extends="id:1348">
            <number name="ID" id="1673" type="integer">
                <fixedvalues>
                    <fixedvalue name="EE" value="0xEE"/>
                </fixedvalues>
            </number>
            <string name="identifier" id="1675" type="fixed-length" length="5">
                <description>= X'4A', X'46', X'49', X'46', X'00'&#13;This zero terminated string (“JFIF”) uniquely identifies this APP0 marker. This string shall have zero parity (bit 7=0).</description>
                <fixedvalues>
                    <fixedvalue name="Adobe" value="Adobe"/>
                </fixedvalues>
            </string>
            <number name="major version" id="1676" type="integer" length="1"/>
            <number name="minor version" id="1677" type="integer" length="1"/>
            <number name="flag0" id="1678" type="integer" length="2"/>
            <number name="flag1" id="1679" type="integer" length="2"/>
            <number name="color_transform_code" id="1680" type="integer" length="1"/>
        </structure>
        <structure name="App15" id="1339" extends="id:1348">
            <number name="ID" id="1683" type="integer">
                <fixedvalues>
                    <fixedvalue name="APP15" value="0xEF"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="QuantTable8" id="1406" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Pq" mustmatch="yes" id="1686" type="integer" length="4" lengthunit="bit">
                <description>Quantization table element precision – Specifies the precision of the Qk values. Value 0 indicates 8-bit Qk&#13;values; value 1 indicates 16-bit Qk values. Pq shall be zero for 8 bit sample precision P</description>
                <fixedvalues>
                    <fixedvalue name="8-bit precision" value="0"/>
                </fixedvalues>
            </number>
            <number name="Tq" id="1687" type="integer" length="4" lengthunit="bit">
                <description>Quantization table destination identifier – Specifies one of four possible destinations at the decoder into which the quantization table shall be installed.</description>
            </number>
            <number name="Qk" id="1688" repeatmax="64" type="integer" length="1">
                <description>Quantization table element – Specifies the kth element out of 64 elements, where k is the index in the zig- zag ordering of the DCT coefficients. The quantization elements shall be specified in zig-zag scan order.</description>
            </number>
        </structure>
        <structure name="QuantTable16" id="1408" extends="id:1406">
            <number name="Pq" id="1690" type="integer">
                <description>Quantization table element precision – Specifies the precision of the Qk values. Value 0 indicates 8-bit Qk&#13;values; value 1 indicates 16-bit Qk values. Pq shall be zero for 8 bit sample precision P</description>
                <fixedvalues>
                    <fixedvalue name="16-bit precision" value="1"/>
                </fixedvalues>
            </number>
            <number name="Qk" id="1692" repeatmax="64" type="integer" length="2">
                <description>Quantization table element – Specifies the kth element out of 64 elements, where k is the index in the zig- zag ordering of the DCT coefficients. The quantization elements shall be specified in zig-zag scan order.</description>
            </number>
        </structure>
        <structure name="ImageData" id="1309" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="SOS" id="1694" structure="id:1370"/>
            <scriptelement name="ScanImage" id="1695">
                <script name="unnamed" type="Generic">
                    <source language="Python">
endFound = False
theOffset = currentOffset
byteView = currentMapper.getCurrentByteView()
results = currentMapper.getCurrentResults()
grammar = currentMapper.getCurrentGrammar()

while not endFound:
	theByte = byteView.readByte(theOffset);
	if (theByte == 0xff):
		theSecondByte = byteView.readByte(theOffset + 1);
		if ((theSecondByte &gt; 0) and (theSecondByte &lt; 0xFF)):
			endFound = True
			theValue = Value();
			theValue.setString( &quot;EOF&quot;);
			# print &quot;End found at offset &quot; + str(theOffset)
			struct = grammar.getStructureByName(&quot;ImageBytes&quot;)
			element = struct.getElementByName(&quot;ImageBytes&quot;)
			length = theOffset - currentOffset
			currentMapper.mapElementWithSize(element, length);

	theOffset = theOffset + 1;
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="RestartImageData" id="1311" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="RST" id="1697" structure="id:1415"/>
            <scriptelement name="ScanImage" id="1698">
                <script name="unnamed" type="Generic">
                    <source language="Python">
endFound = False
theOffset = currentOffset
byteView = currentMapper.getCurrentByteView()
results = currentMapper.getCurrentResults()
grammar = currentMapper.getCurrentGrammar()

while not endFound:
	theByte = byteView.readByte(theOffset);
	if (theByte == 0xff):
		theSecondByte = byteView.readByte(theOffset + 1);
		if ((theSecondByte &gt; 0) and (theSecondByte &lt; 0xFF)):
			endFound = True
			theValue = Value();
			theValue.setString( &quot;EOF&quot;);
			# print &quot;End found at offset &quot; + str(theOffset)
			struct = grammar.getStructureByName(&quot;ImageBytes&quot;)
			element = struct.getElementByName(&quot;ImageBytes&quot;)
			length = theOffset - currentOffset
			currentMapper.mapElementWithSize(element, length);

	theOffset = theOffset + 1;
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="ImageBytes" id="1700" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <binary name="ImageBytes" id="1701" length="remaining"/>
        </structure>
        <structure name="App13Block" id="1668" alignment="0" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <string name="Type" mustmatch="yes" id="1703" type="fixed-length" length="4">
                <fixedvalues>
                    <fixedvalue name="8BIM" value="8BIM"/>
                </fixedvalues>
            </string>
            <number name="Identifier" mustmatch="yes" id="1704" type="integer" length="2"/>
            <structref name="PaddedName" id="1706" structure="id:1705"/>
            <number name="DataSize" id="1707" type="integer" length="4"/>
            <structure name="Data" id="1708" length="DataSize"/>
            <scriptelement name="ConditionalPadByte" id="1710">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1000" id="1494" extends="id:1668">
            <description>Obsolete--Photoshop 2.0 only</description>
            <number name="Identifier" id="1713" type="integer">
                <fixedvalues>
                    <fixedvalue name="Obsolete" value="1000"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1714">
                <number name="ChannelCount" id="1717" type="integer" length="2"/>
                <number name="Rows" id="1718" type="integer" length="2"/>
                <number name="Columns" id="1719" type="integer" length="2"/>
                <number name="Depth" id="1720" type="integer" length="2"/>
                <number name="Mode" id="1721" type="integer" length="2"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1723">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1001" id="1496" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Macintosh print manager print info record</description>
            <number name="Identifier" id="1726" type="integer">
                <fixedvalues>
                    <fixedvalue name="Mac print info" value="1001"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1731">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1003" id="1498" extends="id:1668">
            <description>(Obsolete--Photoshop 2.0 only ) Indexed color table</description>
            <number name="Identifier" id="1734" type="integer">
                <fixedvalues>
                    <fixedvalue name="Indexed color table" value="1003"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1739">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1005" id="1500" extends="id:1668">
            <description>ResolutionInfo structure. See Appendix A in Photoshop API Guide.pdf</description>
            <number name="Identifier" id="1742" type="integer">
                <fixedvalues>
                    <fixedvalue name="ResolutionInfo" value="1005"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1747">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1006" id="1502" extends="id:1668">
            <description>Names of the alpha channels as a series of Pascal strings</description>
            <number name="Identifier" id="1750" type="integer">
                <fixedvalues>
                    <fixedvalue name="1006" value="1006"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1755">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1007" id="1504" extends="id:1668">
            <description>(Obsolete) See ID 1077DisplayInfo structure. See Appendix A in Photoshop API Guide.pdf</description>
            <number name="Identifier" id="1758" type="integer">
                <fixedvalues>
                    <fixedvalue name="1007" value="1007"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1763">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1008" id="1506" extends="id:1668">
            <description>The caption as a Pascal string</description>
            <number name="Identifier" id="1766" type="integer">
                <fixedvalues>
                    <fixedvalue name="1008" value="1008"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1771">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1009" id="1508" extends="id:1668">
            <description>Border information. Contains a fixed number (2 bytes real, 2 bytes fraction) for the border width, and 2 bytes for border units (1 = inches, 2 = cm, 3 = points, 4 = picas, 5 = columns)</description>
            <number name="Identifier" id="1774" type="integer">
                <fixedvalues>
                    <fixedvalue name="1009" value="1009"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1779">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1010" id="1510" extends="id:1668">
            <description>Background color</description>
            <number name="Identifier" id="1782" type="integer">
                <fixedvalues>
                    <fixedvalue name="1010" value="1010"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1787">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1011" id="1512" extends="id:1668">
            <description>Print flags. A series of one-byte boolean values (see Page Setup dialog): labels, crop marks, color bars, registration marks, negative, flip, interpolate, caption, print flags</description>
            <number name="Identifier" id="1790" type="integer">
                <fixedvalues>
                    <fixedvalue name="1011" value="1011"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1791">
                <number name="labels" id="1794" type="integer" length="1"/>
                <number name="crop marks" id="1795" type="integer" length="1"/>
                <number name="color bars" id="1796" type="integer" length="1"/>
                <number name="registration marks" id="1797" type="integer" length="1"/>
                <number name="negative" id="1798" type="integer" length="1"/>
                <number name="flip" id="1799" type="integer" length="1"/>
                <number name="interpolate" id="1800" type="integer" length="1"/>
                <number name="caption" id="1801" type="integer" length="1"/>
                <number name="print flags" id="1802" type="integer" length="1"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1804">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1012" id="1514" extends="id:1668">
            <description>Grayscale and multichannel halftoning information</description>
            <number name="Identifier" id="1807" type="integer">
                <fixedvalues>
                    <fixedvalue name="1012" value="1012"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1812">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1013" id="1516" extends="id:1668">
            <description>Color halftoning information</description>
            <number name="Identifier" id="1815" type="integer">
                <fixedvalues>
                    <fixedvalue name="1013" value="1013"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1816">
                <binary name="ColorHalftoningInfo" id="1819" length="remaining"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1821">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1014" id="1518" extends="id:1668">
            <description>Duotone halftoning information</description>
            <number name="Identifier" id="1824" type="integer">
                <fixedvalues>
                    <fixedvalue name="1014" value="1014"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1829">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1015" id="1520" extends="id:1668">
            <description>Grayscale and multichannel transfer function</description>
            <number name="Identifier" id="1832" type="integer">
                <fixedvalues>
                    <fixedvalue name="1016" value="1016"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1833">
                <binary name="TransferFunction" id="1836" length="remaining">
                    <description>Grayscale and multichannel transfer function</description>
                </binary>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1838">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1016" id="1522" extends="id:1668">
            <description>Color transfer functions</description>
            <number name="Identifier" id="1841" type="integer">
                <fixedvalues>
                    <fixedvalue name="1016" value="1016"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1846">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1017" id="1524" extends="id:1668">
            <description>Duotone transfer functions</description>
            <number name="Identifier" id="1849" type="integer">
                <fixedvalues>
                    <fixedvalue name="1017" value="1017"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1854">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1018" id="1526" extends="id:1668">
            <description>Duotone image information</description>
            <number name="Identifier" id="1857" type="integer">
                <fixedvalues>
                    <fixedvalue name="1018" value="1018"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1862">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1019" id="1528" extends="id:1668">
            <description>Two bytes for the effective black and white values for the dot range</description>
            <number name="Identifier" id="1865" type="integer">
                <fixedvalues>
                    <fixedvalue name="1019" value="1019"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1870">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1020" id="1530" extends="id:1668">
            <description>(Obsolete)</description>
            <number name="Identifier" id="1873" type="integer">
                <fixedvalues>
                    <fixedvalue name="1020" value="1020"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1878">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1021" id="1532" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>EPS options</description>
            <number name="Identifier" id="1881" type="integer">
                <fixedvalues>
                    <fixedvalue name="1021" value="1021"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1886">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1022" id="1534" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Quick Mask information. 2 bytes containing Quick Mask channel ID; 1- byte boolean indicating whether the mask was initially empty</description>
            <number name="Identifier" id="1889" type="integer">
                <fixedvalues>
                    <fixedvalue name="1022" value="1022"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1894">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1023" id="1536" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Obsolete)</description>
            <number name="Identifier" id="1897" type="integer">
                <fixedvalues>
                    <fixedvalue name="1023" value="1023"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1902">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1024" id="1538" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Layer state information. 2 bytes containing the index of target layer (0 = bottom layer)</description>
            <number name="Identifier" id="1905" type="integer">
                <fixedvalues>
                    <fixedvalue name="1024" value="1024"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1910">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1025" id="1540" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Working path (not saved)</description>
            <number name="Identifier" id="1913" type="integer">
                <fixedvalues>
                    <fixedvalue name="1025" value="1025"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1918">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1026" id="1542" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Layers group information. 2 bytes per layer containing a group ID for the dragging groups. Layers in a group have the same group ID</description>
            <number name="Identifier" id="1921" type="integer">
                <fixedvalues>
                    <fixedvalue name="1026" value="1026"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1926">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1027" id="1544" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Obsolete)</description>
            <number name="Identifier" id="1929" type="integer">
                <fixedvalues>
                    <fixedvalue name="1027" value="1027"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1934">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1028" id="1546" extends="id:1668">
            <description>IPTC-NAA record. Contains the File Info... information. See the documentation in the IPTC folder of the Documentation folder</description>
            <number name="Identifier" id="1937" type="integer">
                <fixedvalues>
                    <fixedvalue name="IPTC-NAA" value="1028"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1938">
                <binary name="IPTC Metadata" id="1941" length="remaining"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1943">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1029" id="1548" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Image mode for raw format files</description>
            <number name="Identifier" id="1946" type="integer">
                <fixedvalues>
                    <fixedvalue name="1029" value="1029"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1951">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1030" id="1550" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>JPEG quality. Private</description>
            <number name="Identifier" id="1954" type="integer">
                <fixedvalues>
                    <fixedvalue name="1030" value="1030"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1955">
                <number name="JPEG quality" id="1958" type="integer" length="2" signed="yes" display="hex">
                    <fixedvalues>
                        <fixedvalue name="Quality 1 (Low)" value="0xFFFD"/>
                        <fixedvalue name="Quality 2 (Low)" value="0xFFFE"/>
                        <fixedvalue name="Quality 3 (Low)" value="0xFFFF"/>
                        <fixedvalue name="Quality 4 (Low)" value="0x0"/>
                        <fixedvalue name="Quality 5 (Medium)" value="0x1"/>
                        <fixedvalue name="Quality 6 (Medium)" value="0x2"/>
                        <fixedvalue name="Quality 7 (Medium)" value="0x3"/>
                        <fixedvalue name="Quality 8 (High)" value="0x4"/>
                        <fixedvalue name="Quality 9 (High)" value="0x5"/>
                        <fixedvalue name="Quality 10 (Maximum)" value="0x6"/>
                        <fixedvalue name="Quality 11 (Maximum)" value="0x7"/>
                        <fixedvalue name="Quality 12 (Maximum)" value="0x8"/>
                    </fixedvalues>
                </number>
                <number name="Format" id="1959" type="integer" length="2" display="hex">
                    <fixedvalues>
                        <fixedvalue name="Standard" value="0x0"/>
                        <fixedvalue name="Optimised" value="0x1"/>
                        <fixedvalue name="Progressive" value="0x101"/>
                    </fixedvalues>
                </number>
                <number name="ProgressiveScans" id="1960" type="integer" length="2" display="hex">
                    <fixedvalues>
                        <fixedvalue name="3 Scans" value="0x1"/>
                        <fixedvalue name="4 Scans" value="0x2"/>
                        <fixedvalue name="5 Scans" value="0x3"/>
                    </fixedvalues>
                </number>
                <number name="Unknown" id="1961" type="integer" length="1">
                    <fixedvalues>
                        <fixedvalue name="Always 1" value="1"/>
                    </fixedvalues>
                </number>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1963">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1032" id="1552" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 4.0) Grid and guides information</description>
            <number name="Identifier" id="1966" type="integer">
                <fixedvalues>
                    <fixedvalue name="1032" value="1032"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1967">
                <number name="Version" id="1970" type="integer" length="4"/>
                <number name="HorzGrid" id="1971" type="integer" length="4">
                    <description>Future implementation of document-specific grids. Currently, sets the grid cycle to every quarter inch, i.e. 576 for both horizontal &amp; vertical (at 72 dpi, that is 18 * 32 = 576)</description>
                </number>
                <number name="VertGrid" id="1972" type="integer" length="4">
                    <description>Future implementation of document-specific grids. Currently, sets the grid cycle to every quarter inch, i.e. 576 for both horizontal &amp; vertical (at 72 dpi, that is 18 * 32 = 576)</description>
                </number>
                <number name="fGuideCount" id="1973" type="integer" length="1">
                    <description>Number of guide resource blocks (can be 0)</description>
                </number>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1975">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1033" id="1554" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 4.0) Thumbnail resource for Photoshop 4.0 only</description>
            <number name="Identifier" id="1978" type="integer">
                <fixedvalues>
                    <fixedvalue name="1033" value="1033"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="1983">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1034" id="1556" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 4.0) Copyright flag. Boolean indicating whether image is copyrighted. Can be set via Property suite or by user in File Info...</description>
            <number name="Identifier" id="1986" type="integer">
                <fixedvalues>
                    <fixedvalue name="1034" value="1034"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="1987">
                <number name="CopyrightFlag" id="1990" type="integer" length="1"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="1992">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1035" id="1558" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 4.0) URL. Handle of a text string with uniform resource locator. Can be set via Property suite or by user in File Info...</description>
            <number name="Identifier" id="1995" type="integer">
                <fixedvalues>
                    <fixedvalue name="1035" value="1035"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2000">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1036" id="1560" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Thumbnail resource (supersedes resource 1033)</description>
            <number name="Identifier" id="2003" type="integer">
                <fixedvalues>
                    <fixedvalue name="1036" value="1036"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2004">
                <structref name="ThumbnailResource" id="2008" structure="id:2007"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2010">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1037" id="1562" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Global Angle. 4 bytes that contain an integer between 0 and 359, which is the global lighting angle for effects layer. If not present, assumed to be 30</description>
            <number name="Identifier" id="2013" type="integer">
                <fixedvalues>
                    <fixedvalue name="1037" value="1037"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2014">
                <number name="GlobalAngle" id="2017" type="integer" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2019">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1038" id="1564" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Obsolete) See ID 1073 below. (Photoshop 5.0) Color samplers resource</description>
            <number name="Identifier" id="2022" type="integer">
                <fixedvalues>
                    <fixedvalue name="1038" value="1038"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2027">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1039" id="1566" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) ICC Profile. The raw bytes of an ICC (International Color Consortium) format profile. See ICC1v42_2006-05.pdf in the Documentation folder and icProfileHeader.h in Sample Code\Common\Includes</description>
            <number name="Identifier" id="2030" type="integer">
                <fixedvalues>
                    <fixedvalue name="1039" value="1039"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2035">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1040" id="1568" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Watermark. One byte</description>
            <number name="Identifier" id="2038" type="integer">
                <fixedvalues>
                    <fixedvalue name="1040" value="1040"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2043">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1041" id="1570" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) ICC Untagged Profile. 1 byte that disables any assumed profile handling when opening the file. 1 = intentionally untagged</description>
            <number name="Identifier" id="2046" type="integer">
                <fixedvalues>
                    <fixedvalue name="1041" value="1041"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2047">
                <number name="ProfileHandling" id="2050" type="integer" length="1">
                    <fixedvalues>
                        <fixedvalue name="intentionally untagged" value="1"/>
                    </fixedvalues>
                </number>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2052">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1042" id="1572" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Effects visible. 1-byte global flag to show/hide all the effects layer. Only present when they are hidden</description>
            <number name="Identifier" id="2055" type="integer">
                <fixedvalues>
                    <fixedvalue name="1042" value="1042"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2060">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1043" id="1574" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Spot Halftone. 4 bytes for version, 4 bytes for length, and the variable length data</description>
            <number name="Identifier" id="2063" type="integer">
                <fixedvalues>
                    <fixedvalue name="1043" value="1043"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2068">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1044" id="1576" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Document-specific IDs seed number. 4 bytes: Base value, starting at which layer IDs will be generated (or a greater value if existing IDs already exceed it). Its purpose is to avoid the case where we add layers, flatten, save, open, and then add more layers that end up with the same IDs as the first set</description>
            <number name="Identifier" id="2071" type="integer">
                <fixedvalues>
                    <fixedvalue name="1044" value="1044"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2072">
                <number name="BaseValue" id="2075" type="integer" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2077">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1045" id="1578" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 5.0) Unicode Alpha Names. Unicode string</description>
            <number name="Identifier" id="2080" type="integer">
                <fixedvalues>
                    <fixedvalue name="1045" value="1045"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2085">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1046" id="1580" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Indexed Color Table Count. 2 bytes for the number of colors in table that are actually defined</description>
            <number name="Identifier" id="2088" type="integer">
                <fixedvalues>
                    <fixedvalue name="1046" value="1046"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2093">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1047" id="1582" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Transparency Index. 2 bytes for the index of transparent color, if any</description>
            <number name="Identifier" id="2096" type="integer">
                <fixedvalues>
                    <fixedvalue name="1047" value="1047"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2101">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1049" id="1584" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Global Altitude. 4 byte entry for altitude</description>
            <number name="Identifier" id="2104" type="integer">
                <fixedvalues>
                    <fixedvalue name="1049" value="1049"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2105">
                <number name="GlobalAltitude" id="2108" type="integer" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2110">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1050" id="1586" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Slices</description>
            <number name="Identifier" id="2113" type="integer">
                <fixedvalues>
                    <fixedvalue name="1050" value="1050"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2114">
                <structure name="Slices" id="2117" order="variable">
                    <structref name="SlicesBlock6" id="2119" repeatmin="0" structure="id:2118"/>
                    <structref name="SlicesBlock7_8" id="2121" repeatmin="0" structure="id:2120"/>
                </structure>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2124">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1051" id="1588" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Workflow URL. Unicode string</description>
            <number name="Identifier" id="2127" type="integer">
                <fixedvalues>
                    <fixedvalue name="1051" value="1051"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2132">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1052" id="1590" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Jump To XPEP. 2 bytes major version, 2 bytes minor version, 4 bytes count. Following is repeated for count: 4 bytes block size, 4 bytes key, if key = 'jtDd' , then next is a Boolean for the dirty flag; otherwise it's a 4 byte entry for the mod date</description>
            <number name="Identifier" id="2135" type="integer">
                <fixedvalues>
                    <fixedvalue name="1052" value="1052"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2140">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1053" id="1592" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) Alpha Identifiers. 4 bytes of length, followed by 4 bytes each for every alpha identifier</description>
            <number name="Identifier" id="2143" type="integer">
                <fixedvalues>
                    <fixedvalue name="1053" value="1053"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2148">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1054" id="1594" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 6.0) URL List. 4 byte count of URLs, followed by 4 byte long, 4 byte ID, and Unicode string for each count</description>
            <number name="Identifier" id="2151" type="integer">
                <fixedvalues>
                    <fixedvalue name="1054" value="1054"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2152">
                <number name="URL count" id="2155" type="integer" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2157">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1057" id="1596" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Photoshop 6.0) Version Info. 4 bytes version, 1 byte hasRealMergedData , Unicode string: writer name, Unicode string: reader name, 4 bytes file version</description>
            <number name="Identifier" id="2160" type="integer">
                <fixedvalues>
                    <fixedvalue name="1057" value="1057"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2161">
                <number name="Version" id="2164" type="integer" length="4"/>
                <number name="hasRealMergedData" id="2165" type="integer" length="1"/>
                <number name="WriterNameLength" id="2166" type="integer" length="4"/>
                <string name="WriterName" id="2167" type="fixed-length" length="WriterNameLength*2" encoding="UTF-16"/>
                <number name="ReaderNameLength" id="2168" type="integer" length="4"/>
                <string name="ReaderName" id="2169" type="fixed-length" length="ReaderNameLength*2" encoding="UTF-16"/>
                <number name="FileVersion" id="2170" type="integer" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2172">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1058" id="1598" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 7.0) EXIF data 1</description>
            <number name="Identifier" id="2175" type="integer">
                <fixedvalues>
                    <fixedvalue name="1058" value="1058"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2180">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1059" id="1600" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 7.0) EXIF data 3</description>
            <number name="Identifier" id="2183" type="integer">
                <fixedvalues>
                    <fixedvalue name="1059" value="1059"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2188">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1060" id="1602" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 7.0) XMP metadata. File info as XML description</description>
            <number name="Identifier" id="2191" type="integer">
                <fixedvalues>
                    <fixedvalue name="1060" value="1060"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2196">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1061" id="1604" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop 7.0) Caption digest. 16 bytes: RSA Data Security, MD5 message-digest algorithm</description>
            <number name="Identifier" id="2199" type="integer">
                <fixedvalues>
                    <fixedvalue name="1061" value="1061"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2204">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1062" id="1606" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Photoshop 7.0) Print scale. 2 bytes style (0 = centered, 1 = size to fit, 2 = user defined). 4 bytes x location (floating point). 4 bytes y location (floating point). 4 bytes scale (floating point)</description>
            <number name="Identifier" id="2207" type="integer">
                <fixedvalues>
                    <fixedvalue name="1062" value="1062"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2208">
                <number name="Style" id="2211" type="integer" length="2">
                    <fixedvalues>
                        <fixedvalue name="centered" value="0"/>
                        <fixedvalue name="size to fit" value="1"/>
                        <fixedvalue name="user defined" value="2"/>
                    </fixedvalues>
                </number>
                <number name="x location" id="2212" type="float" length="4"/>
                <number name="y location" id="2213" type="float" length="4"/>
                <number name="scale" id="2214" type="float" length="4"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2216">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1064" id="1608" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS) Pixel Aspect Ratio. 4 bytes (version = 1 or 2), 8 bytes double, x / y of a pixel. Version 2, attempting to correct values for NTSC and PAL, previously off by a factor of approx. 5%</description>
            <number name="Identifier" id="2219" type="integer">
                <fixedvalues>
                    <fixedvalue name="1064" value="1064"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2224">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1065" id="1610" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS) Layer Comps. 4 bytes (descriptor version = 16), Descriptor</description>
            <number name="Identifier" id="2227" type="integer">
                <fixedvalues>
                    <fixedvalue name="1065" value="1065"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2232">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1066" id="1612" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS) Alternate Duotone Colors. 2 bytes (version = 1), 2 bytes count, following is repeated for each count: [ Color: 2 bytes for space followed by 4 * 2 byte color component ], following this is another 2 byte count, usually 256, followed by Lab colors one byte each for L, a, b. This resource is not read or used by Photoshop</description>
            <number name="Identifier" id="2235" type="integer">
                <fixedvalues>
                    <fixedvalue name="1066" value="1066"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2240">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1067" id="1614" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS)Alternate Spot Colors. 2 bytes (version = 1), 2 bytes channel count, following is repeated for each count: 4 bytes channel ID, Color: 2 bytes for space followed by 4 * 2 byte color component. This resource is not read or used by Photoshop</description>
            <number name="Identifier" id="2243" type="integer">
                <fixedvalues>
                    <fixedvalue name="1067" value="1067"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2248">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1069" id="1616" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS2) Layer Selection ID(s). 2 bytes count, following is repeated for each count: 4 bytes layer ID</description>
            <number name="Identifier" id="2251" type="integer">
                <fixedvalues>
                    <fixedvalue name="1069" value="1069"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2256">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1070" id="1618" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS2) HDR Toning information</description>
            <number name="Identifier" id="2259" type="integer">
                <fixedvalues>
                    <fixedvalue name="1070" value="1070"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2264">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1071" id="1620" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS2) Print info</description>
            <number name="Identifier" id="2267" type="integer">
                <fixedvalues>
                    <fixedvalue name="1071" value="1071"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2272">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1072" id="1622" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS2) Layer Group(s) Enabled ID. 1 byte for each layer in the document, repeated by length of the resource. NOTE: Layer groups have start and end markers</description>
            <number name="Identifier" id="2275" type="integer">
                <fixedvalues>
                    <fixedvalue name="1072" value="1072"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2280">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1073" id="1624" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) Color samplers resource. Also see ID 1038 for old format</description>
            <number name="Identifier" id="2283" type="integer">
                <fixedvalues>
                    <fixedvalue name="1073" value="1073"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2288">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1074" id="1626" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Photoshop CS3) Measurement Scale. 4 bytes (descriptor version = 16), Descriptor</description>
            <number name="Identifier" id="2291" type="integer">
                <fixedvalues>
                    <fixedvalue name="1074" value="1074"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2296">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1075" id="1628" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) Timeline Information. 4 bytes (descriptor version = 16), Descriptor</description>
            <number name="Identifier" id="2299" type="integer">
                <fixedvalues>
                    <fixedvalue name="1075" value="1075"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2304">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1076" id="1630" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) Sheet Disclosure. 4 bytes (descriptor version = 16), Descriptor</description>
            <number name="Identifier" id="2307" type="integer">
                <fixedvalues>
                    <fixedvalue name="1076" value="1076"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2312">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1077" id="1632" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) DisplayInfo structure to support floating point clors. Also see ID 1007. See Appendix A in Photoshop API Guide.pdf</description>
            <number name="Identifier" id="2315" type="integer">
                <fixedvalues>
                    <fixedvalue name="1077" value="1077"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2320">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1078" id="1634" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) Onion Skins. 4 bytes (descriptor version = 16), Descriptor</description>
            <number name="Identifier" id="2323" type="integer">
                <fixedvalues>
                    <fixedvalue name="1078" value="1078"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2328">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1080" id="1636" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS4) Count Information. 4 bytes (descriptor version = 16), Descriptor (see See Descriptor structure) Information about the count in the document. See the Count Tool</description>
            <number name="Identifier" id="2331" type="integer">
                <fixedvalues>
                    <fixedvalue name="1080" value="1080"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2336">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1082" id="1638" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS5) Print Information. 4 bytes (descriptor version = 16), Descriptor (see See Descriptor structure) Information about the current print settings in the document. The color management options</description>
            <number name="Identifier" id="2339" type="integer">
                <fixedvalues>
                    <fixedvalue name="1082" value="1082"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2344">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1083" id="1640" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS5) Print Style. 4 bytes (descriptor version = 16), Descriptor (see See Descriptor structure) Information about the current print style in the document. The printing marks, labels, ornaments, etc.</description>
            <number name="Identifier" id="2347" type="integer">
                <fixedvalues>
                    <fixedvalue name="1083" value="1083"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2352">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1084" id="1642" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS5) Macintosh NSPrintInfo. Variable OS specific info for Macintosh. NSPrintInfo. It is recommened that you do not interpret or use this data</description>
            <number name="Identifier" id="2355" type="integer">
                <fixedvalues>
                    <fixedvalue name="1084" value="1084"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2360">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1085" id="1644" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS5) Windows DEVMODE. Variable OS specific info for Windows. DEVMODE. It is recommened that you do not interpret or use this data</description>
            <number name="Identifier" id="2363" type="integer">
                <fixedvalues>
                    <fixedvalue name="1085" value="1085"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2368">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1086" id="1646" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS6) Auto Save File Path. Unicode string. It is recommened that you do not interpret or use this data</description>
            <number name="Identifier" id="2371" type="integer">
                <fixedvalues>
                    <fixedvalue name="1086" value="1086"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2376">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1087" id="1648" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS6) Auto Save Format. Unicode string. It is recommened that you do not interpret or use this data</description>
            <number name="Identifier" id="2379" type="integer">
                <fixedvalues>
                    <fixedvalue name="1087" value="1087"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2384">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block1088" id="1650" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CC) Path Selection State. 4 bytes (descriptor version = 16), Descriptor Information about the current path selection state</description>
            <number name="Identifier" id="2387" type="integer">
                <fixedvalues>
                    <fixedvalue name="1088" value="1088"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2392">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block2xxx-2997" id="1652" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Path Information (saved paths)</description>
            <number name="Identifier" id="2395" type="integer" minval="2000" maxval="2997"/>
            <scriptelement name="ConditionalPadByte" id="2400">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block2999" id="1654" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Name of clipping path</description>
            <number name="Identifier" id="2403" type="integer">
                <fixedvalues>
                    <fixedvalue name="2999" value="2999"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2408">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block3000" id="1656" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CC) Origin Path Info. 4 bytes (descriptor version = 16), Descriptor Information about the origin path data</description>
            <number name="Identifier" id="2411" type="integer">
                <fixedvalues>
                    <fixedvalue name="3000" value="3000"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2416">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block4xxx" id="1658" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Plug-In resource(s). Resources added by a plug-in. See the plug-in API found in the SDK documentation</description>
            <number name="Identifier" id="2419" type="integer" minval="4000" maxval="4999"/>
            <scriptelement name="ConditionalPadByte" id="2424">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block7000" id="1660" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Image Ready variables. XML representation of variables definition</description>
            <number name="Identifier" id="2427" type="integer">
                <fixedvalues>
                    <fixedvalue name="7000" value="7000"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2432">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block7001" id="1662" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Image Ready data sets</description>
            <number name="Identifier" id="2435" type="integer">
                <fixedvalues>
                    <fixedvalue name="7001" value="7001"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2440">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block8000" id="1664" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>(Photoshop CS3) Lightroom workflow, if present the document is in the middle of a Lightroom workflow</description>
            <number name="Identifier" id="2443" type="integer">
                <fixedvalues>
                    <fixedvalue name="8000" value="8000"/>
                </fixedvalues>
            </number>
            <scriptelement name="ConditionalPadByte" id="2448">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="App13Block10000" id="1666" extends="id:1668" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <description>Print flags information. 2 bytes version ( = 1), 1 byte center crop marks, 1 byte ( = 0), 4 bytes bleed width value, 2 bytes bleed width scale</description>
            <number name="Identifier" id="2451" type="integer">
                <fixedvalues>
                    <fixedvalue name="100000" value="10000"/>
                </fixedvalues>
            </number>
            <structure name="Data" id="2452">
                <number name="Version" id="2455" type="integer" length="2"/>
                <number name="center crop marks" id="2456" type="integer" length="1"/>
                <number name="reserved" id="2457" type="integer" length="1"/>
                <number name="bleed width value" id="2458" type="integer" length="4"/>
                <number name="bleed width scale" id="2459" type="integer" length="2"/>
            </structure>
            <scriptelement name="ConditionalPadByte" id="2461">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

dataResult = results.getResultByName(&quot;DataSize&quot;)
value = dataResult.getValue()
length = value.getUnsigned()

print length

if length % 2 == 1:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="Elements" id="2463" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <binary name="PaddingByte" id="2464" length="remaining"/>
        </structure>
        <structure name="PaddedName" id="1705" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <string name="Name" id="2466" type="pascal"/>
            <scriptelement name="ConditionalPadByte" id="2467">
                <script name="unnamed" type="Generic">
                    <source language="Python">results = currentMapper.getCurrentResults()

lastResult = results.getLastResult()

value = lastResult.getValue()

text = value.getString()

textLength = 0

if text != None:
	debugLog(text)
	textLength = text.length

if textLength % 2 == 0:
	# add padding element with one byte
	grammar = currentMapper.getCurrentGrammar()
	structure = grammar.getStructureByName(&quot;Elements&quot;)
	element = structure.getElementByName(&quot;PaddingByte&quot;)
	currentMapper.mapElementWithSize(element, 1)
</source>
                </script>
            </scriptelement>
        </structure>
        <structure name="PaddedData" id="2469" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structure name="Data" id="2470"/>
        </structure>
        <structure name="SlicesBlock" id="2473" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="Version" mustmatch="yes" id="2474" type="integer" length="4"/>
        </structure>
        <structure name="SlicesBlock6" id="2118" extends="id:2473">
            <number name="Version" id="2476" type="integer">
                <fixedvalues>
                    <fixedvalue name="Version6" value="6"/>
                </fixedvalues>
            </number>
            <structure name="BoundingRect" id="2477">
                <number name="top" id="2478" type="integer" length="4"/>
                <number name="left" id="2479" type="integer" length="4"/>
                <number name="bottom" id="2480" type="integer" length="4"/>
                <number name="right" id="2481" type="integer" length="4"/>
            </structure>
            <structref name="SlicesGroupName" id="2484" structure="id:2483"/>
            <number name="NumberOfSlices" id="2485" type="integer" length="4"/>
            <structref name="SlicesResourceBlock" id="2487" repeatmin="NumberOfSlices" repeatmax="NumberOfSlices" structure="id:2486"/>
        </structure>
        <structure name="SlicesBlock7_8" id="2120" extends="id:2473">
            <number name="Version" id="2489" type="integer">
                <fixedvalues>
                    <fixedvalue name="Version7" value="7"/>
                    <fixedvalue name="Version8" value="8"/>
                </fixedvalues>
            </number>
            <number name="DescriptorVersion" id="2490" type="integer" length="4">
                <fixedvalues>
                    <fixedvalue name="Photoshop 6.0" value="16"/>
                </fixedvalues>
            </number>
        </structure>
        <structure name="SlicesResourceBlock" id="2486" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="ID" id="2492" type="integer" length="4"/>
            <number name="Group ID" id="2493" type="integer" length="4"/>
            <number name="Origin" id="2494" type="integer" length="4"/>
            <number name="Layer ID" id="2495" disabled="yes" type="integer" length="4"/>
            <structref name="Name" id="2496" structure="id:2483"/>
            <number name="Type" id="2497" type="integer" length="4"/>
            <structure name="Positions" id="2498">
                <number name="left" id="2499" type="integer" length="4"/>
                <number name="top" id="2500" type="integer" length="4"/>
                <number name="right" id="2501" type="integer" length="4"/>
                <number name="bottom" id="2502" type="integer" length="4"/>
            </structure>
            <structref name="URL" id="2504" structure="id:2483"/>
            <structref name="Target" id="2505" structure="id:2483"/>
            <structref name="Message" id="2506" structure="id:2483"/>
            <structref name="Alt Tag" id="2507" structure="id:2483"/>
            <number name="CellTextIsHTML" id="2508" type="integer" length="1"/>
            <structref name="CellText" id="2509" structure="id:2483"/>
            <number name="HorzAlignment" id="2510" type="integer" length="4"/>
            <number name="VertAlignment" id="2511" type="integer" length="4"/>
            <number name="AlphaColor" id="2512" type="integer" length="1"/>
            <number name="Red" id="2513" type="integer" length="1"/>
            <number name="Green" id="2514" type="integer" length="1"/>
            <number name="Blue" id="2515" type="integer" length="1"/>
            <number name="DescriptorVersion" id="2516" repeatmin="0" type="integer" length="4"/>
            <structref name="Descriptor" id="2518" repeatmin="0" structure="id:2517"/>
        </structure>
        <structure name="UnicodeString" id="2483" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <number name="SlicesNameLength" id="2520" type="integer" length="4"/>
            <string name="SlicesName" id="2521" type="fixed-length" length="SlicesNameLength*2"/>
        </structure>
        <structure name="Descriptor" id="2517" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structref name="Name" id="2523" structure="id:2483"/>
            <number name="classID" id="2524" type="integer" length="4"/>
            <number name="NumberOfItems" id="2525" type="integer" length="4"/>
            <structure name="Item" id="2526">
                <number name="length" id="2527" type="integer" length="4"/>
            </structure>
        </structure>
        <structure name="ThumbnailResource" id="2007" encoding="ISO_8859-1:1987" endian="big" signed="no">
            <structure name="Header" id="2530" length="28">
                <number name="Format" id="2531" type="integer" length="4">
                    <fixedvalues>
                        <fixedvalue name="kJpegRGB" value="1"/>
                        <fixedvalue name="kRawRGB" value="0"/>
                    </fixedvalues>
                </number>
                <number name="Width" id="2532" type="integer" length="4"/>
                <number name="Height" id="2533" type="integer" length="4"/>
                <number name="WidthBytes" id="2534" type="integer" length="4"/>
                <number name="TotalSize" id="2535" type="integer" length="4"/>
                <number name="CompressedSize" id="2536" type="integer" length="4"/>
                <number name="BitsPerPixel" id="2537" type="integer" length="2"/>
                <number name="NumberOfPlanes" id="2538" type="integer" length="2"/>
            </structure>
            <structref name="JPG file" id="2540" structure="id:1303"/>
        </structure>
    </grammar>
</ufwb>
